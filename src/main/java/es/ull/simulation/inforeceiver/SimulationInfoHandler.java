package es.ull.simulation.inforeceiver;

import java.util.ArrayList;
import java.util.HashMap;
import es.ull.simulation.info.SimulationInfo;

/**
 * This class is responsible for managing the information that is generated by the simulation and
 * the listeners that are interested in receiving it.
 */
public class SimulationInfoHandler {
	/**
	 * A map between the type of information and the listeners that are interested in receiving it.
	 */
	private final HashMap<Class<? extends SimulationInfo>, ArrayList<Listener> > registeredListeners;
	
	/**
	 * Creates a handler for the simulation information.
	 */
	public SimulationInfoHandler() {
		registeredListeners = new HashMap<Class<? extends SimulationInfo>, ArrayList<Listener>>();
	}
	
	/**
	 * Registers a listener to receive information of a certain type.
	 * @param listener The listener that wants to receive the information.
	 */
	public void registerListener(Listener listener) {	
		for (Class<? extends SimulationInfo> cl: listener.getTargetInformation()) {
			ArrayList<Listener> list;
			if (!registeredListeners.containsKey(cl)) {
				list = new ArrayList<Listener>();
				registeredListeners.put(cl, list);
			}
			else {
				list = registeredListeners.get(cl);
			}
			list.add(listener);
		}
	}

	/**
	 * Notifies the listeners that a piece of information has been generated.
	 * @param info The piece of information that has been generated.
	 */
	public void notifyInfo(SimulationInfo info) {
		if (registeredListeners.containsKey(info.getClass())) {
			final ArrayList<Listener> list = registeredListeners.get(info.getClass());
			for(Listener listener: list)
				listener.infoEmited(info);
		}
	}
	
}

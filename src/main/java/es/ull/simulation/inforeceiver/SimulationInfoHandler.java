package es.ull.simulation.inforeceiver;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

import es.ull.simulation.info.ElementActionInfo;
import es.ull.simulation.info.ElementInfo;
import es.ull.simulation.info.EntityLocationInfo;
import es.ull.simulation.info.ResourceInfo;
import es.ull.simulation.info.ResourceUsageInfo;
import es.ull.simulation.info.SimulationInfo;
import es.ull.simulation.info.SimulationStartStopInfo;
import es.ull.simulation.info.TimeChangeInfo;

/**
 * This class is responsible for managing the information that is generated by the simulation and
 * the listeners that are interested in receiving it.
 */
public class SimulationInfoHandler implements IInfoHandler {

	private HashSet<Class<?>> definedInfos;
	private HashMap<Class<?>, ArrayList<Listener> > entranceList;
	
	public SimulationInfoHandler() {
		definedInfos = new HashSet<Class<?>>();
		entranceList = new HashMap<Class<?>, ArrayList<Listener>>();
		initEntranceList();
	}
	
	private void initEntranceList() {
		definedInfos.add(SimulationStartStopInfo.class);
		definedInfos.add(ElementActionInfo.class);
		definedInfos.add(ElementInfo.class);
		definedInfos.add(ResourceInfo.class);
		definedInfos.add(ResourceUsageInfo.class);
		definedInfos.add(EntityLocationInfo.class);
		definedInfos.add(TimeChangeInfo.class);
	}
	
	private void addDefinedInfos(ArrayList<Class<?>> infos) {
		definedInfos.addAll(infos);
	}
	
	private void indexReceiver(Listener receiver) {
		for (Class<?> cl: receiver.getEntrance()) {
			if (definedInfos.contains(cl)){
				ArrayList<Listener> list = entranceList.get(cl);
				if (list != null)
					list.add(receiver);
				else {
					list = new ArrayList<Listener>();
					list.add(receiver);
					entranceList.put(cl, list);
				}
			} else {
				Error err = new Error("Unable to index " + receiver.getClass().toString() + " to info " + cl.toString());
				err.printStackTrace();
			}				
		}
	}
	
	public void registerReceivers(Listener receiver) {	
		if (receiver instanceof Listener)
			addDefinedInfos(((Listener) receiver).getGeneratedInfos());
		indexReceiver(receiver);
	}

	public void notifyInfo(SimulationInfo info) {
		final ArrayList<Listener> list = entranceList.get(info.getClass());
		if (list != null)
			for(Listener listener: list)
				listener.infoEmited(info);
	}
	
}
